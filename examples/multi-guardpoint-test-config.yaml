# Multi-Guard Point Test Configuration
# Test scenario with secure data and database guard points
# Complex security rules for user-specific access control

name: "multi_guardpoint_test_policy"
version: 2

# =============================================================================
# USER SETS - Define user groups and access levels
# =============================================================================
user_sets:
  admin_users:
    name: "admin_users"
    users: ["ntoi"]
    groups: ["wheel", "sudo", "admin"]
    uids: [1000]  # ntoi's UID

  restricted_user1:
    name: "restricted_user1"
    users: ["testuser1"]
    uids: [1001]  # testuser1's UID

  restricted_user2:
    name: "restricted_user2"
    users: ["testuser2"]
    uids: [1002]  # testuser2's UID

  database_users:
    name: "database_users"
    users: ["mysql", "mariadb"]
    groups: ["mysql"]
    uids: [114]  # MariaDB system user UID

  all_test_users:
    name: "all_test_users"
    users: ["ntoi", "testuser1", "testuser2"]
    uids: [1000, 1001, 1002]

# =============================================================================
# PROCESS SETS - Define MariaDB and custom application processes
# =============================================================================
process_sets:
  mariadb_processes:
    name: "mariadb_processes"
    processes: ["mysqld", "mariadbd", "mysql"]
    process_paths:
      - "/usr/sbin/mariadbd"
      - "/usr/bin/mysql"
      - "/usr/sbin/mysqld"
    database_rules:
      - database_types: ["mysql", "mariadb"]
        listen_ports: [3306, 3307]
        data_paths: ["/var/lib/mysql"]
        environment_vars: ["MYSQL_ROOT_PASSWORD"]
    process_types: ["mysql", "mariadb"]
    require_all: false

  custom_database_apps:
    name: "custom_database_apps"
    processes: 
      - "my-custom-app"
      - "enterprise-db-tool"
      - "python3"  # Python apps accessing database
      - "java"     # Java apps accessing database
    process_paths:
      - "/opt/custom-apps/*"
      - "/usr/local/bin/my-custom-app"
    process_types: ["user_app", "python", "java"]
    require_all: false

  admin_tools:
    name: "admin_tools"
    processes:
      - "bash"
      - "sh"
      - "sudo"
      - "cat"
      - "ls"
      - "vim"
      - "nano"
    process_types: ["shell", "user_app"]
    require_all: false

# =============================================================================
# RESOURCE SETS - Define protected data categories
# =============================================================================
resource_sets:
  # Secure data for individual users
  ntoi_secure_data:
    name: "ntoi_secure_data"
    directories:
      - "/tmp/secure-data/ntoi"
      - "/tmp/secure-data/shared/ntoi-*"
    file_patterns:
      - "ntoi-*.txt"
      - "ntoi-*.doc"
      - "admin-*.pdf"
    extensions: [".txt", ".doc", ".pdf", ".key"]

  testuser1_secure_data:
    name: "testuser1_secure_data"
    directories:
      - "/tmp/secure-data/testuser1"
    file_patterns:
      - "testuser1-*.txt"
      - "user1-*.doc"
    extensions: [".txt", ".doc", ".pdf"]

  testuser2_secure_data:
    name: "testuser2_secure_data"
    directories:
      - "/tmp/secure-data/testuser2"
    file_patterns:
      - "testuser2-*.txt"
      - "user2-*.doc"
    extensions: [".txt", ".doc", ".pdf"]

  shared_secure_data:
    name: "shared_secure_data"
    directories:
      - "/tmp/secure-data/shared"
    file_patterns:
      - "shared-*.txt"
      - "common-*.doc"
    extensions: [".txt", ".doc", ".pdf"]

  # Database data
  mariadb_data:
    name: "mariadb_data"
    directories:
      - "/tmp/database-data"
      - "/var/lib/mysql"
    file_patterns:
      - "*.frm"
      - "*.ibd"
      - "*.MYD"
      - "*.MYI"
      - "ibdata*"
      - "ib_logfile*"
    extensions: [".frm", ".ibd", ".MYD", ".MYI"]

  database_config:
    name: "database_config"
    directories:
      - "/tmp/database-data/config"
    file_patterns:
      - "my.cnf"
      - "*.conf"
    extensions: [".cnf", ".conf"]

# =============================================================================
# GUARD POINTS - Define protection boundaries
# =============================================================================
guard_points:
  # Guard Point 1: Secure Data with Complex User Access Rules
  - name: "secure_data_protection"
    path: "/tmp/secure-data"
    recursive: true
    policy: "secure_data_policy_v2"
    enabled: true
    include_patterns:
      - "*.txt"
      - "*.doc"
      - "*.pdf"
      - "*.key"
    exclude_patterns:
      - "*.log"
      - "*.tmp"

  # Guard Point 2: Database Data for MariaDB Access
  - name: "database_data_protection"
    path: "/tmp/database-data"
    recursive: true
    policy: "database_policy_v2"
    enabled: true
    process_whitelist: []  # No process whitelist - use security rules

# =============================================================================
# SECURITY RULES - Ordered evaluation with first-match-wins
# =============================================================================
security_rules:
  # ======== SECURE DATA ACCESS RULES ========
  
  # Rule 1: ntoi (admin) can access ALL secure data (both user folders)
  - order: 1
    resource_set: "ntoi_secure_data"
    user_set: "admin_users"
    process_set: "admin_tools"
    actions: ["f_rd", "f_wr", "f_cre", "f_rm", "f_rd_att", "f_chg_att"]
    effects: ["permit", "applykey", "audit"]
    description: "Admin ntoi can access own secure data"

  - order: 2
    resource_set: "testuser1_secure_data"
    user_set: "admin_users"
    process_set: "admin_tools"
    actions: ["f_rd", "f_wr", "f_rd_att"]
    effects: ["permit", "applykey", "audit"]
    description: "Admin ntoi can access testuser1 secure data"

  - order: 3
    resource_set: "testuser2_secure_data"
    user_set: "admin_users"
    process_set: "admin_tools"
    actions: ["f_rd", "f_wr", "f_rd_att"]
    effects: ["permit", "applykey", "audit"]
    description: "Admin ntoi can access testuser2 secure data"

  - order: 4
    resource_set: "shared_secure_data"
    user_set: "admin_users"
    process_set: "admin_tools"
    actions: ["f_rd", "f_wr", "f_cre", "f_rm", "f_rd_att", "f_chg_att"]
    effects: ["permit", "applykey", "audit"]
    description: "Admin ntoi can manage shared secure data"

  # Rule 5-6: testuser1 can ONLY access their own data (NOT testuser2's)
  - order: 5
    resource_set: "testuser1_secure_data"
    user_set: "restricted_user1"
    process_set: "admin_tools"
    actions: ["f_rd", "f_wr", "f_cre", "f_rd_att"]
    effects: ["permit", "applykey", "audit"]
    description: "testuser1 can access own secure data"

  - order: 6
    resource_set: "shared_secure_data"
    user_set: "restricted_user1"
    process_set: "admin_tools"
    actions: ["f_rd", "f_rd_att"]
    effects: ["permit", "applykey", "audit"]
    description: "testuser1 can read shared secure data"

  # Rule 7-8: testuser2 can ONLY access their own data (NOT testuser1's)
  - order: 7
    resource_set: "testuser2_secure_data"
    user_set: "restricted_user2"
    process_set: "admin_tools"
    actions: ["f_rd", "f_wr", "f_cre", "f_rd_att"]
    effects: ["permit", "applykey", "audit"]
    description: "testuser2 can access own secure data"

  - order: 8
    resource_set: "shared_secure_data"
    user_set: "restricted_user2"
    process_set: "admin_tools"
    actions: ["f_rd", "f_rd_att"]
    effects: ["permit", "applykey", "audit"]
    description: "testuser2 can read shared secure data"

  # Rule 9-10: DENY cross-user access (testuser1 cannot access testuser2's data)
  - order: 9
    resource_set: "testuser2_secure_data"
    user_set: "restricted_user1"
    actions: ["all_ops"]
    effects: ["deny", "audit"]
    description: "DENY testuser1 access to testuser2 secure data"

  - order: 10
    resource_set: "testuser1_secure_data"
    user_set: "restricted_user2"
    actions: ["all_ops"]
    effects: ["deny", "audit"]
    description: "DENY testuser2 access to testuser1 secure data"

  # ======== DATABASE ACCESS RULES ========

  # Rule 11: MariaDB processes have full access to database data
  - order: 11
    resource_set: "mariadb_data"
    process_set: "mariadb_processes"
    actions: ["all_ops"]
    effects: ["permit", "applykey", "audit"]
    description: "MariaDB processes can access database data with encryption"

  # Rule 12: Custom applications can access database data
  - order: 12
    resource_set: "mariadb_data"
    process_set: "custom_database_apps"
    actions: ["f_rd", "f_wr", "f_cre"]
    effects: ["permit", "applykey", "audit"]
    description: "Custom apps can access database data with encryption"

  # Rule 13: Database users can manage database config
  - order: 13
    resource_set: "database_config"
    user_set: "database_users"
    actions: ["f_rd", "f_wr", "f_rd_att", "f_chg_att"]
    effects: ["permit", "applykey", "audit"]
    description: "Database users can manage database config"

  # Rule 14: Admin can manage database config
  - order: 14
    resource_set: "database_config"
    user_set: "admin_users"
    process_set: "admin_tools"
    actions: ["f_rd", "f_wr", "f_cre", "f_rm", "f_rd_att", "f_chg_att"]
    effects: ["permit", "applykey", "audit"]
    description: "Admin can manage database configuration"

  # ======== FALLBACK RULES ========

  # Rule 97: DENY unauthorized access to secure data
  - order: 97
    resource_set: "ntoi_secure_data"
    actions: ["all_ops"]
    effects: ["deny", "audit"]
    description: "DENY unauthorized access to ntoi secure data"

  - order: 98
    resource_set: "testuser1_secure_data"
    actions: ["all_ops"]
    effects: ["deny", "audit"]
    description: "DENY unauthorized access to testuser1 secure data"

  - order: 99
    resource_set: "testuser2_secure_data"
    actions: ["all_ops"]
    effects: ["deny", "audit"]
    description: "DENY unauthorized access to testuser2 secure data"

  # Rule 100: DENY unauthorized access to database data
  - order: 100
    resource_set: "mariadb_data"
    actions: ["all_ops"]
    effects: ["deny", "audit"]
    description: "DENY unauthorized access to database data"

# =============================================================================
# V2 POLICIES WITH SECURITY RULES
# =============================================================================
policies_v2:
  - name: "secure_data_policy_v2"
    type: "live_data_transformation"
    algorithm: "AES-256-GCM"
    key_size: 256
    enabled: true
    version: 2
    key_version: 1
    key_rotation_interval: "24h"
    audit_level: "full"
    security_rules:
      # Include all secure data rules (1-10, 97-99)
      - order: 1
        resource_set: "ntoi_secure_data"
        user_set: "admin_users"
        process_set: "admin_tools"
        actions: ["f_rd", "f_wr", "f_cre", "f_rm", "f_rd_att", "f_chg_att"]
        effects: ["permit", "applykey", "audit"]
        description: "Admin ntoi can access own secure data"
      
      - order: 2
        resource_set: "testuser1_secure_data"
        user_set: "admin_users"
        process_set: "admin_tools"
        actions: ["f_rd", "f_wr", "f_rd_att"]
        effects: ["permit", "applykey", "audit"]
        description: "Admin ntoi can access testuser1 secure data"
      
      - order: 3
        resource_set: "testuser2_secure_data"
        user_set: "admin_users"
        process_set: "admin_tools"
        actions: ["f_rd", "f_wr", "f_rd_att"]
        effects: ["permit", "applykey", "audit"]
        description: "Admin ntoi can access testuser2 secure data"

      - order: 5
        resource_set: "testuser1_secure_data"
        user_set: "restricted_user1"
        process_set: "admin_tools"
        actions: ["f_rd", "f_wr", "f_cre", "f_rd_att"]
        effects: ["permit", "applykey", "audit"]
        description: "testuser1 can access own secure data"

      - order: 7
        resource_set: "testuser2_secure_data"
        user_set: "restricted_user2"
        process_set: "admin_tools"
        actions: ["f_rd", "f_wr", "f_cre", "f_rd_att"]
        effects: ["permit", "applykey", "audit"]
        description: "testuser2 can access own secure data"

      - order: 9
        resource_set: "testuser2_secure_data"
        user_set: "restricted_user1"
        actions: ["all_ops"]
        effects: ["deny", "audit"]
        description: "DENY testuser1 access to testuser2 secure data"

      - order: 10
        resource_set: "testuser1_secure_data"
        user_set: "restricted_user2"
        actions: ["all_ops"]
        effects: ["deny", "audit"]
        description: "DENY testuser2 access to testuser1 secure data"

  - name: "database_policy_v2"
    type: "live_data_transformation"
    algorithm: "AES-256-GCM"
    key_size: 256
    enabled: true
    version: 2
    key_version: 1
    key_rotation_interval: "24h"
    audit_level: "full"
    security_rules:
      # Include all database rules (11-14, 100)
      - order: 11
        resource_set: "mariadb_data"
        process_set: "mariadb_processes"
        actions: ["all_ops"]
        effects: ["permit", "applykey", "audit"]
        description: "MariaDB processes can access database data with encryption"

      - order: 12
        resource_set: "mariadb_data"
        process_set: "custom_database_apps"
        actions: ["f_rd", "f_wr", "f_cre"]
        effects: ["permit", "applykey", "audit"]
        description: "Custom apps can access database data with encryption"

      - order: 100
        resource_set: "mariadb_data"
        actions: ["all_ops"]
        effects: ["deny", "audit"]
        description: "DENY unauthorized access to database data"

# =============================================================================
# LEGACY POLICIES (for backward compatibility)
# =============================================================================
policies:
  secure_data_policy:
    name: "secure_data_policy"
    type: "live_data_transformation"
    algorithm: "AES-256-GCM"
    key_size: 256
    enabled: true
    user_sets: ["admin_users", "restricted_user1", "restricted_user2"]
    process_sets: ["admin_tools"]
    resource_sets: ["ntoi_secure_data", "testuser1_secure_data", "testuser2_secure_data", "shared_secure_data"]
    require_all_sets: false
    key_rotation_interval: "24h"
    audit_level: "full"

  database_policy:
    name: "database_policy"
    type: "live_data_transformation"
    algorithm: "AES-256-GCM"
    key_size: 256
    enabled: true
    user_sets: ["database_users", "admin_users"]
    process_sets: ["mariadb_processes", "custom_database_apps"]
    resource_sets: ["mariadb_data", "database_config"]
    require_all_sets: false
    key_rotation_interval: "24h"
    audit_level: "full"

# =============================================================================
# AUDIT CONFIGURATION
# =============================================================================
audit:
  enabled: true
  level: "full"
  destinations:
    - type: "file"
      path: "/tmp/takakrypt-multi-guardpoint-test.log"
      format: "json"
  filters:
    - action: "include"
      effects: ["deny", "audit"]
    - action: "include"
      user_patterns: ["testuser1", "testuser2", "ntoi"]